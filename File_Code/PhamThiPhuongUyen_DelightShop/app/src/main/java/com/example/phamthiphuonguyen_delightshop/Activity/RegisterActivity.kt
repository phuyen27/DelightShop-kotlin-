package com.example.phamthiphuonguyen_delightshop.Activity

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.widget.Toast
import androidx.activity.compose.setContent
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.unit.dp
import com.example.phamthiphuonguyen_delightshop.R
import com.google.firebase.database.DatabaseReference
import com.google.firebase.database.FirebaseDatabase
import java.util.UUID
import com.cloudinary.Cloudinary
import com.cloudinary.utils.ObjectUtils
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.lifecycle.lifecycleScope
import coil.compose.rememberImagePainter
import java.text.SimpleDateFormat
import java.util.Calendar
import android.app.DatePickerDialog
import androidx.compose.foundation.clickable
import androidx.compose.material.Text
import androidx.compose.material3.ExposedDropdownMenuBox
import androidx.compose.material3.DropdownMenuItem
import java.util.Locale

val cloudinary = Cloudinary(ObjectUtils.asMap(
    "cloud_name", "duunwe78n",
    "api_key", "165915974528129",
    "api_secret", "OFAb8CW7lGVA4dS9ORyMZzj_TWs"
))

class RegisterActivity : AppCompatActivity() {
    private lateinit var database: DatabaseReference
    private var imageUrl: String = ""
    private val pickImageLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri ->
        uri?.let { uploadImageToCloudinary(it) }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        database = FirebaseDatabase.getInstance().getReference("Users")

        setContent {
            RegisterScreen(
                onRegister = { name, email, password, phone, address, dob, gender ->
                    registerUser(name, email, password, phone, address, imageUrl, dob, gender)
                },
                onPickImage = { pickImageLauncher.launch("image/*") }
            )
        }
    }

    private fun registerUser(
        name: String,
        email: String,
        password: String,
        phone: String,
        address: String,
        imageUrl: String,
        dob: String,
        gender: String
    ) {

        generateUserId { userId ->
            val user = mapOf(
                "userId" to userId,
                "name" to name,
                "email" to email,
                "password" to password,
                "phone" to phone,
                "address" to address,
                "userImg" to imageUrl,
                "dob" to dob,
                "gender" to gender
            )

            // L∆∞u user v√†o Firebase
            database.child(userId.toString()).setValue(user).addOnSuccessListener {
                Toast.makeText(this, "ƒêƒÉng k√Ω th√†nh c√¥ng!", Toast.LENGTH_SHORT).show()
                val subject = "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Delight Shop! - X√°c nh·∫≠n ƒëƒÉng k√Ω"
                val content = """
                Xin ch√†o $name,
            
                Ch√∫ng t√¥i r·∫•t vui m·ª´ng ch√†o ƒë√≥n b·∫°n ƒë·∫øn v·ªõi Delight Shop! T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.
            
                V·ªõi Delight Shop, b·∫°n s·∫Ω c√≥ tr·∫£i nghi·ªám mua s·∫Øm nhanh ch√≥ng, ti·ªán l·ª£i c√πng nhi·ªÅu ∆∞u ƒë√£i h·∫•p d·∫´n. H√£y ƒëƒÉng nh·∫≠p v√† kh√°m ph√° ngay!
            
                N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o ho·∫∑c c·∫ßn h·ªó tr·ª£, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i qua email ho·∫∑c fanpage ch√≠nh th·ª©c.
            
                üåü Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi c√πng Delight Shop! üåü
            
                Tr√¢n tr·ªçng,
                Delight Shop HCM
            """.trimIndent()

                val sender = GmailSender(email, content, subject)
                sender.start()

                startActivity(Intent(this, LoginActivity::class.java))
                finish()
            }.addOnFailureListener {
                Toast.makeText(this, "L·ªói ƒëƒÉng k√Ω!", Toast.LENGTH_SHORT).show()
            }
        }
    }

    private fun generateUserId(callback: (Long) -> Unit) {
        val userId = (100000L..999999L).random() // T·∫°o s·ªë ng·∫´u nhi√™n 6 ch·ªØ s·ªë
        database.child(userId.toString()).get().addOnSuccessListener { snapshot ->
            if (snapshot.exists()) {
                // N·∫øu userId ƒë√£ t·ªìn t·∫°i, t·∫°o l·∫°i
                generateUserId(callback)
            } else {
                // N·∫øu userId ch∆∞a t·ªìn t·∫°i, tr·∫£ v·ªÅ userId h·ª£p l·ªá
                callback(userId)
            }
        }.addOnFailureListener {
            Toast.makeText(this, "L·ªói ki·ªÉm tra userId!", Toast.LENGTH_SHORT).show()
        }
    }



    private fun uploadImageToCloudinary(imageUri: Uri) {
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val inputStream = contentResolver.openInputStream(imageUri)
                val response = cloudinary.uploader().upload(inputStream, ObjectUtils.emptyMap())
                val uploadedImageUrl = response["secure_url"] as String

                // Update imageUrl with the uploaded image URL
                imageUrl = uploadedImageUrl

                withContext(Dispatchers.Main) {
                    Toast.makeText(this@RegisterActivity, "·∫¢nh ƒë√£ t·∫£i l√™n!", Toast.LENGTH_SHORT).show()
                }
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    Toast.makeText(this@RegisterActivity, "L·ªói t·∫£i ·∫£nh!", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun RegisterScreen(onRegister: (String, String, String, String, String, String, String) -> Unit, onPickImage: () -> Unit) {
    var name by remember { mutableStateOf("") }
    var email by remember { mutableStateOf("") }
    var password by remember { mutableStateOf("") }
    var phone by remember { mutableStateOf("") }
    var address by remember { mutableStateOf("") }
    var birthDate by remember { mutableStateOf("") }
    var gender by remember { mutableStateOf("Nam") }
    val context=LocalContext.current
    // Dropdown Menu state for gender
    val expanded = remember { mutableStateOf(false) }
    val genderOptions = listOf("Nam", "N·ªØ", "Kh√°c")

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = Alignment.CenterHorizontally,
    ) {
        // C√°c tr∆∞·ªùng nh·∫≠p li·ªáu
        OutlinedTextField(
            value = name,
            onValueChange = { name = it },
            label = { Text("H·ªç v√† t√™n") },
            modifier = Modifier.fillMaxWidth(),
            leadingIcon = {
                Icon(painter = painterResource(id = R.drawable.user), contentDescription = "user Icon", modifier = Modifier.size(16.dp), tint = Color.Gray)
            },
            shape = RoundedCornerShape(20.dp),
            colors = TextFieldDefaults.colors(
                focusedContainerColor = Color.White,
                unfocusedContainerColor = Color.White,
                focusedIndicatorColor = colorResource(R.color.green),
                unfocusedIndicatorColor = Color.Gray,
                focusedLabelColor = Color.Green,
                unfocusedLabelColor = Color.Gray
            )
        )

        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = email,
            onValueChange = { email = it },
            label = { Text("Email") },
            modifier = Modifier.fillMaxWidth(),
            leadingIcon = {
                Icon(painter = painterResource(id = R.drawable.email), contentDescription = "Email Icon", modifier = Modifier.size(16.dp), tint = Color.Gray)
            },
            shape = RoundedCornerShape(20.dp),
            colors = TextFieldDefaults.colors(
                focusedContainerColor = Color.White,
                unfocusedContainerColor = Color.White,
                focusedIndicatorColor = colorResource(R.color.green),
                unfocusedIndicatorColor = Color.Gray,
                focusedLabelColor = Color.Green,
                unfocusedLabelColor = Color.Gray
            )
        )

        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = password,
            onValueChange = { password = it },
            label = { Text("M·∫≠t kh·∫©u") },
            visualTransformation = PasswordVisualTransformation(),
            keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Password),
            modifier = Modifier.fillMaxWidth(),
            leadingIcon = {
                Icon(painter = painterResource(id = R.drawable.lock), contentDescription = "pass Icon", modifier = Modifier.size(16.dp), tint = Color.Gray)
            },
            shape = RoundedCornerShape(20.dp),
            colors = TextFieldDefaults.colors(
                focusedContainerColor = Color.White,
                unfocusedContainerColor = Color.White,
                focusedIndicatorColor = colorResource(R.color.green),
                unfocusedIndicatorColor = Color.Gray,
                focusedLabelColor = Color.Green,
                unfocusedLabelColor = Color.Gray
            )
        )

        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = phone,
            onValueChange = { phone = it },
            label = { Text("S·ªë ƒëi·ªán tho·∫°i") },
            keyboardOptions = KeyboardOptions.Default.copy(keyboardType = KeyboardType.Phone),
            modifier = Modifier.fillMaxWidth(),
            leadingIcon = {
                Icon(painter = painterResource(id = R.drawable.telephone), contentDescription = "phone Icon", modifier = Modifier.size(16.dp), tint = Color.Gray)
            },
            shape = RoundedCornerShape(20.dp),
            colors = TextFieldDefaults.colors(
                focusedContainerColor = Color.White,
                unfocusedContainerColor = Color.White,
                focusedIndicatorColor = colorResource(R.color.green),
                unfocusedIndicatorColor = Color.Gray,
                focusedLabelColor = Color.Green,
                unfocusedLabelColor = Color.Gray
            )
        )

        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = address,
            onValueChange = { address = it },
            label = { Text("ƒê·ªãa ch·ªâ") },
            modifier = Modifier.fillMaxWidth(),
            leadingIcon = {
                Icon(painter = painterResource(id = R.drawable.address), contentDescription = "address Icon", modifier = Modifier.size(16.dp), tint = Color.Gray)
            },
            shape = RoundedCornerShape(20.dp),
            colors = TextFieldDefaults.colors(
                focusedContainerColor = Color.White,
                unfocusedContainerColor = Color.White,
                focusedIndicatorColor = colorResource(R.color.green),
                unfocusedIndicatorColor = Color.Gray,
                focusedLabelColor = Color.Green,
                unfocusedLabelColor = Color.Gray
            )
        )

        Spacer(modifier = Modifier.height(8.dp))

        // Ch·ªçn ng√†y sinh
        OutlinedTextField(
            value = birthDate,
            onValueChange = { birthDate = it },
            label = { Text("Ng√†y sinh (dd/mm/yy)") },
            modifier = Modifier.fillMaxWidth(),
            leadingIcon = {
                Icon(painter = painterResource(id = R.drawable.calendar), contentDescription = "Expiry Date Icon", modifier = Modifier.size(16.dp), tint = Color.Gray)
            },
            shape = RoundedCornerShape(20.dp),
            colors = TextFieldDefaults.colors(
                focusedContainerColor = Color.White,
                unfocusedContainerColor = Color.White,
                focusedIndicatorColor = colorResource(R.color.green),
                unfocusedIndicatorColor = Color.Gray,
                focusedLabelColor = Color.Green,
                unfocusedLabelColor = Color.Gray
            )
        )

        Spacer(modifier = Modifier.height(8.dp))

        // Spinner gi·ªõi t√≠nh
        ExposedDropdownMenuBox(
            expanded = expanded.value,
            onExpandedChange = { expanded.value = !expanded.value }
        ) {
            OutlinedTextField(
                value = gender,
                onValueChange = {},
                label = { Text("Gi·ªõi t√≠nh") },
                readOnly = true,
                modifier = Modifier
                    .fillMaxWidth()
                    .menuAnchor(),
                trailingIcon = {
                    ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded.value)
                },
                leadingIcon = {
                    Icon(
                        painter = painterResource(id = R.drawable.genders),
                        contentDescription = "Gender Icon",
                        modifier = Modifier.size(16.dp),
                        tint = Color.Gray
                    )
                },
                shape = RoundedCornerShape(20.dp),
                colors = TextFieldDefaults.colors(
                    focusedContainerColor = Color.White,
                    unfocusedContainerColor = Color.White,
                    focusedIndicatorColor = colorResource(R.color.green),
                    unfocusedIndicatorColor = Color.Gray,
                    focusedLabelColor = Color.Green,
                    unfocusedLabelColor = Color.Gray
                )
            )

            ExposedDropdownMenu(
                expanded = expanded.value,
                onDismissRequest = { expanded.value = false }
            ) {
                genderOptions.forEach { option ->
                    DropdownMenuItem(
                        text = { Text(option) },
                        onClick = {
                            gender = option
                            expanded.value = false
                        }
                    )
                }
            }
        }


        Spacer(modifier = Modifier.height(16.dp))

        // N√∫t ch·ªçn ·∫£nh
        Button(
            onClick = onPickImage,
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF2196F3))
        ) {
            Text("Ch·ªçn ·∫£nh ƒë·∫°i di·ªán", color = Color.White)
        }

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = {
                if (name.isBlank() || email.isBlank() || password.isBlank() || phone.isBlank() || address.isBlank() || birthDate.isBlank()) {
                    Toast.makeText(context, "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!", Toast.LENGTH_SHORT).show()
                } else {
                    onRegister(name, email, password, phone, address, birthDate, gender)
                }
            },
            modifier = Modifier.fillMaxWidth(),
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4CAF50))
        ) {
            Text("ƒêƒÉng k√Ω", color = Color.White)
        }
    }
}
